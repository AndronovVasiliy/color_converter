{"version":3,"sources":["logo.svg","components/InputColor.jsx","App.js","reportWebVitals.js","index.js"],"names":["InputColor","useState","hexColor","sethexColor","backgroundColor","transitionProperty","transitionDuration","textAlign","width","height","style","setbackgroundColor","display","flexDirection","alignItems","margin","border","marginBottom","verticalAlign","onChange","e","value","target","length","result","exec","prev","parseInt","type","id","maxLength","readOnly","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAAe,I,0BCsDAA,MApDf,WAAuB,IAAD,EAEcC,mBAAS,IAFvB,mBAEXC,EAFW,KAEDC,EAFC,OAGkBF,mBAAS,CACzCG,gBAAiB,GACjBC,mBAAoB,mBACpBC,mBAAoB,KACpBC,UAAW,SACXC,MAAO,QACPC,OAAQ,UATM,mBAGXC,EAHW,KAGJC,EAHI,KA0BlB,OACI,sBAAKD,MAAOA,EAAZ,UACI,6HACA,sBAAKA,MAAO,CAAEE,QAAS,OAAQC,cAAe,SAAUL,MAAO,QAASM,WAAY,WAAYC,OAAQ,UAAxG,UACI,sBAAKL,MAAO,CAAEN,gBAAiB,OAAQQ,QAAS,OAAQJ,MAAO,QAASQ,OAAQ,kBAAmBC,aAAc,QAAjH,UACI,qBAAKP,MAAO,CAAEF,MAAO,MAAOI,QAAS,SAArC,SACI,sBAAMF,MAAS,CAACE,QAAS,eAAgBM,cAAe,UAAxD,iBAEJ,qBAAKR,MAAO,CAAEF,MAAO,OAArB,SACI,uBAAOW,SAAU,SAACC,GAAD,OAvBpB,SAACA,GAEd,IAAIC,EAAQD,EAAEE,OAAOD,MAGrB,GAFAlB,EAAYkB,GAES,IAAjBA,EAAME,OAAc,CACpB,IAAIC,EAAS,4CAA4CC,KAAKJ,GAE1DV,EADAa,EACmB,SAAAE,GAAI,kCAAUA,GAAV,IAAgBtB,gBAAgB,OAAD,OAASuB,SAASH,EAAO,GAAI,IAA7B,aAAqCG,SAASH,EAAO,GAAI,IAAzD,aAAiEG,SAASH,EAAO,GAAI,IAArF,QAChC,SAAAE,GAAI,kCAAUA,GAAV,IAAgBtB,gBAAiB,gDAC5DO,GAAmB,SAAAe,GAAI,kCAAUA,GAAV,IAAgBtB,gBAAiB,QAavBe,CAASC,IAAIQ,KAAK,OAAOC,GAAG,IAAIC,UAAU,IAAIT,MAAOnB,SAGrF,sBAAKQ,MAAO,CAAEN,gBAAiB,OAAQQ,QAAS,OAAQJ,MAAO,QAASQ,OAAQ,mBAAhF,UACI,qBAAKN,MAAO,CAAEF,MAAO,OAArB,SACI,yCAEJ,qBAAKE,MAAO,CAAEF,MAAO,OAArB,SACI,uBAAOoB,KAAK,OAAOP,MAAOX,EAAMN,gBAAiB2B,UAAQ,gBC/BlEC,MARf,WACE,OACE,mCACA,cAAC,EAAD,OCGWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c1b144b8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\r\n\r\nfunction InputColor() {\r\n\r\n    const [hexColor, sethexColor] = useState('');\r\n    const [style, setbackgroundColor] = useState({\r\n        backgroundColor: '',\r\n        transitionProperty: 'background-color',\r\n        transitionDuration: '1s',\r\n        textAlign: 'center',\r\n        width: '100vw',\r\n        height: '100vh'\r\n    });\r\n\r\n    const onChange = (e) => {\r\n\r\n        let value = e.target.value\r\n        sethexColor(value)\r\n        \r\n        if (value.length === 6) {\r\n            let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(value);\r\n            if (result) {\r\n                setbackgroundColor(prev => ({ ...prev, backgroundColor: `rgb(${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)})` }))\r\n            } else setbackgroundColor(prev => ({ ...prev, backgroundColor: 'ошибка' }))\r\n        } else setbackgroundColor(prev => ({ ...prev, backgroundColor: '' }))\r\n\r\n    }\r\n\r\n    return (\r\n        <div style={style}>\r\n            <h1>КОНВЕРТЕР ЦВЕТОВ</h1>\r\n            <div style={{ display: 'flex', flexDirection: 'column', width: '200px', alignItems: 'flex-end', margin: '0 auto' }}>\r\n                <div style={{ backgroundColor: 'grey', display: 'flex', width: '200px', border: '1px solid black', marginBottom: '10px' }}>\r\n                    <div style={{ width: \"20%\", display: \"block\" }}>\r\n                        <span style = {{display: \"inline-block\", verticalAlign: \"middle\"}}>#</span>\r\n                    </div>\r\n                    <div style={{ width: \"80%\" }}>\r\n                        <input onChange={(e) => onChange(e)} type=\"text\" id=\"1\" maxLength=\"6\" value={hexColor} />\r\n                    </div>\r\n                </div>\r\n                <div style={{ backgroundColor: 'grey', display: 'flex', width: '200px', border: '1px solid black' }}>\r\n                    <div style={{ width: \"20%\" }}>\r\n                        <span>rgb</span>\r\n                    </div>\r\n                    <div style={{ width: \"80%\" }}>\r\n                        <input type=\"text\" value={style.backgroundColor} readOnly />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default InputColor\r\n","import logo from './logo.svg';\nimport './App.css';\nimport InputColor from './components/InputColor';\n\n\n\nfunction App() {\n  return (\n    <>\n    <InputColor />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}